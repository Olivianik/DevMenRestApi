Introduction to Node.js 9
--------------------------
npm init -y
npm i express mongoose ejs
npm i --save-dev nodemon
remove test script and add dev script "test": "echo \"Error: no test specified\" && exit 1" -> "devStart": "nodemon server.js"
create server.js
add gitignore node modules env
=========================> add commit setup server push
-server.js
pull express library
create app variavel to use express library
app listen at 5000
create dummy get / route
=========================> add commit testing route push
-server.js
set view engine
create views folder
create index.ejs
-views/index.ejs
add ! boilerplate html
change title to blog
add body dummy test
-server.js
change response dummy get / route to render html
=========================> add commit testing ejs push
-views/index.ejs
add <h1></h1>
create routes folder
create articles.js
-routes/articles.js
pull express library
pull router express library and call it
modele export as router
-server.js
create const var to pull router articles
use articlerouter at /articles
-routes/articles.js
create dummy get articles route
=========================> add commit dummy articles push
-server.js
create dummy var articles
pass dynamic params to get / route
-views/index.ejs
pass data from dynamic params
add bootstrap css
add div container
add h1 class
and make class to make space betweeen h1 and button
create button with href to new articles and class btn green
=========================> add commit edit view index push
-views/index.ejs
get articles
<%= is mean output to the page
add for each function
with for each have div card mt-4
-server.js
add var for second articles
change document createdAt to new date if we didnt convert to locale date string it will be long date format
-views/index.ejs
add class card body inside div body
add class card title in h4 and move dynamic data article there
add div class card subtitle for date add dynamic data created at there and convert it tolocale date string
add div class card text inside card body add dynamic data description there
=========================> add commit edit view index 2 push
-routes/articles.js
change / to /new route
create articles folder
create new.ejs
move index.ejs inside articles folder
-server.js
change res render index to articles/index
-views/articles/new.ejs
copy everything from views/articles/index.ejs
delete everything except container
test put some dummy text
=========================> add commit create view new articles push
-views/articles/index.ejs
fix href from artices to articles
-views/articles/new.ejs
add h1 class header with mb 4
create form post to submit article
-routes/articles.js
create post to route /
create partial view to separate multiple form uses
-views/articles/new.ejs
call partial view with <%- is to render html
-views/articles/_formFields.ejs
use this emmet for create div form group .form-group
create label
create input from with emet "input"
add type name id class(bootstrap)
mark as required
create button with type submit add bootstrap class btn primary
copy to make 3 input
use textarea emmet to make text area with class form control
create cancel button with href to index
=========================> add commit create view new articles 2 push
-server.js
pull mongoose library
app use library
npm i --save-dev dotenv
create .env
-.env
link db
port
-server.js
pull dotenv library
add port variabel
connect mongodb
create variabel db for connection
create debug for fail/success connection
create debug for listen port
=========================> add commit database configured push
create models folder
create articles.js
-models/articles.js
pull mongoose library
create variabel to make schema
build schema
=========================> add commit create schema push
-models/articles.js
module exports schema
rename to article
-routes/articles.js
export blog articles to variabel
-server.js
to access page form app use urlencoded
-routes/articles.js
create post / route
add var for object article
save it and then change function to async
await articel async save
wrap it inside try catch
update article var with await
redirect to get /article/id
=========================> add commit create post route push
-routes/articles.js
create dummy get /article/id
catch Error to redirect and pass previous value
-server.js
move up articles url encoded upside the app use article
move app use article to the very bottom
-views/articles/_formFields.ejs
insert value to accept previous value
specify markdwon as required
-routes/articles.js
add value article : new Article() at get /new route
router post / change const to let
=========================> add commit create post route 2 push
-routes/articles.js
create router get id dummy request
create var for router get id
render page view
convert router get id for async
create if else to check article was there
create article view show
-views/articles/show.ejs
copy paste new.ejs
delete all except container
add h1 for article title with dynamic params
add div for date
add 2 button for all article and edit
show dummy markdown
=========================> add commit create get route by id push
-server.js
remove dummy data in index
pull out article schema
create var to store data article and find
convert to async await
sort find by desc
-views/articles/index.ejs
create show button
=========================> add commit create view index content push
npm i marked slugify
create markdown and turn it to html
sulgify convert title into a url friendly slug
-models/article.js
pull marked library
pull slugify library
setup slugify column in model
automatically calculate url every time save to database
create pre validate function
change title to slug with lower true and strict true
call next function
now we can create a slug from our title every single time we validate a model
=========================> add commit slugify setup push
-routes/articles.js
change params id to slug in route get /
change await method in route get to find by slug
change route post / to route slug instead route to id
change findby id to find and then to findone because it only wants to return one not an array
-view/index.ejs
change button href to article.slug
-server.js
useCreateIndex true on mongoose connect not supported on atlas
=========================> add commit slugify route setup push