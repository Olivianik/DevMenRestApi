Introduction to Node.js 6
--------------------------
npm init -y for default dependency
npm i express ejs
1st dependency framework
2nd dependency ejs templating language for all different view
dev dependecy npm i --save-dev nodemon dotenv
nodemon restart server at save
dotenv will let us have environment variabel inside dotenv file
add .env
add git ignore for node_modules(can be npm install) and .env
setup packages.json
remove test script and add dev script "test": "echo \"Error: no test specified\" && exit 1" -> "devStart": "nodemon server.js"
create server.js
=========================> add commit basic server setup push
-server.js
variabel to pull express library
variabel to run express library
listen app server at 3000
setup get route index.ejs
create views/index.ejs
-views/index.ejs
test h1 hi
=========================> add commit testing index.ejs
-server.js
tell server we using ejs
test passing name variabel
-views/index.ejs
add name variabel
add login.ejs
add register.ejs
-server.js
add dummy render and route for login
add dummy render and route for register
=========================> add commit testing login and register push
-view/register.ejs
create form post and navigation
-view/login.ejs
create form post and navigation
-server.js
create dummy post route register
create dummy post route login
we are getting information from forms app.use(express.urlencoded({extended: false}))
it means take these forms from our email and password, we want to be able to access them inside our request variabel inside of our post method
=========================> add commit create login and register form with setup express work push
npm i bcrypt
pull bcrypt library
-server.js
add bcrypt library
create users local variabel
try catch on post register route
convert it to async
create await hashedpassword var and use bcrypt 10 default value
push form body
success redirect login
fail redirect register
log console users
=========================> add commit finish register function push
npm i passport passport-local express-session express-flash
checking to make sure user name email pass are the same wasnt difficult
but to actually persist that user across all different request it gets a little bit involved
passport is used by everyone for authentication
local passport version allow us to use username and <local> password for login 
in order to store and persist our user across different pages we need to use something called session
display message for if we fail to login install express flash which is used by passport inside the internal to display those nice handy messages for wrong email etc
setup passport to working with login
create passport-config.js
-passport-config.js
initialize passport
-server.js
pull passport library
pull initialize passport from passport-config.js
call function initialize passport
-passport-config.js
create variabel to pull local strategy passport
use local strategy, pass option username field, pass function to authenticate
create authenticate user function, pass email, password, done function
call passport serialize user, pass user and done
this is going to serialize our user to store inside of session
make function to do opposite deserialize, pass id and done
serialize user as a single id
matches user password with input password pull bcrypt
exports module
work authenticate user make sure to add params getuserbyemail at initialize function
-server.js
add params email on initialize passport function
pull express flash, app use express flash
pull express session, app use express session
session take couple params
add session secret to .env
load env variabel
add session resave to false
add seve uninitialize to false
use app passport initialize
use app passport session
rework route post login to use passport library
-views/login.ejs
add variabel to show error
-passport-config.js
async on authenticateUser
passport.use(new LocalStrategy({usernameField: 'email'}), authenticateUser)
to
passport.use(new LocalStrategy({usernameField: 'email'}, authenticateUser))
var name is LocalStrategy
<% messages.error %> replace with <%= messages.error %>
if (user == null) {
    return done(null, false, {mesage: 'No user with that email'})
}
replace with
if (user == null) {
    return done(null, false, {message: 'No user with that email'})
}
=========================> add commit added finished login function push
-passport-config.js
rework on serialize
rework on deserialize
pass getuserbyid on initialize function
-server.js
define getuserbyid on initialize passport function
app get index pass req.user.name
=========================> add commit login success push
create middleware function for check authenticated
add check authenticated to get index route
create middleware function for check not authenticated
add check not authenticated to get login route
add check not authenticated to post login route
add check not authenticated to get register route
add check not authenticated to post register route
=========================> add commit authenticated and non authenticated logic push